package wotsp

import (
	"testing"
	"bytes"
	"github.com/Re0h/wotsp/testdata"
)

func TestBase16(t *testing.T) {
	input := []byte{0x12, 0x34}
	want := []uint8{1, 2, 3, 4}

	output := base16(input, 4)
	if !bytes.Equal(output, want) {
		t.Error("base16(", input, "): got ", output, " wanted ", want)
	}

	output = base16(input, 3)
	if !bytes.Equal(output, want[:3]) {
		t.Error("base16(", input, "): got ", output, " wanted ", want)
	}

	output = base16(input, 2)
	if !bytes.Equal(output, want[:2]) {
		t.Error("base16(", input, "): got ", output, " wanted ", want)
	}

	output = base16(input, 1)
	if !bytes.Equal(output, want[:1]) {
		t.Error("base16(", input, "): got ", output, " wanted ", want)
	}

}

func TestAddressToBytes(t *testing.T) {
	a := &Address{
		Layer: 0x10111119,
		Tree: 0x2022222930333339,
		Type: 0x40444449,
		OTS: 0x50555559,
		Chain: 0x60666669,
		Hash: 0x70777779,
		KeyAndMask: 0x80888889,
	}

	aBytes := []byte{
		0x10, 0x11, 0x11, 0x19,
		0x20, 0x22, 0x22, 0x29,
		0x30, 0x33, 0x33, 0x39,
		0x40, 0x44, 0x44, 0x49,
		0x50, 0x55, 0x55, 0x59,
		0x60, 0x66, 0x66, 0x69,
		0x70, 0x77, 0x77, 0x79,
		0x80, 0x88, 0x88, 0x89,
	}

	if !bytes.Equal(a.toBytes(), aBytes) {
		t.Error("Got ", a.toBytes(), " wanted ", aBytes)
	}
}

// Seed, pubSeed and the corresponding public key in the testdata package were
// taken from a run of the implementation by Rijneveld & Hulsing, which
// accompanies the IETF draft for XMSS.
func TestGenPublicKey(t *testing.T) {
	seed := []byte{
		0x69, 0x31, 0x41, 0xc7,
		0xee, 0x70, 0x1d, 0x13,
		0xe1, 0xa7, 0xc7, 0x33,
		0xe0, 0xaa, 0x83, 0x26,
		0xc1, 0x99, 0x61, 0x42,
		0x9b, 0xfb, 0x54, 0x08,
		0x3f, 0x2f, 0x65, 0xb3,
		0x0c, 0x32, 0xe2, 0x0b,
	}

	pubSeed := []byte{
		0x46, 0xec, 0xe5, 0x85,
		0xb4, 0xc0, 0xbf, 0xa1,
		0x18, 0x62, 0x09, 0x27,
		0x0e, 0x22, 0xfa, 0x07,
		0xc4, 0x71, 0x64, 0x61,
		0xb5, 0xa0, 0x26, 0xc2,
		0x68, 0xe5, 0x94, 0xfb,
		0x94, 0x40, 0x4f, 0x3a,
	}

	pubKey := GenPublicKey(Address{}, seed, pubSeed)

	if !bytes.Equal(pubKey, testdata.PubKey) {
		t.Error("Wrong key")
	}
}

//func TestSign(t *testing.T) {
//	seed := []byte{
//		0x69, 0x31, 0x41, 0xc7,
//		0xee, 0x70, 0x1d, 0x13,
//		0xe1, 0xa7, 0xc7, 0x33,
//		0xe0, 0xaa, 0x83, 0x26,
//		0xc1, 0x99, 0x61, 0x42,
//		0x9b, 0xfb, 0x54, 0x08,
//		0x3f, 0x2f, 0x65, 0xb3,
//		0x0c, 0x32, 0xe2, 0x0b,
//	}
//
//	pubSeed := []byte{
//		0x46, 0xec, 0xe5, 0x85,
//		0xb4, 0xc0, 0xbf, 0xa1,
//		0x18, 0x62, 0x09, 0x27,
//		0x0e, 0x22, 0xfa, 0x07,
//		0xc4, 0x71, 0x64, 0x61,
//		0xb5, 0xa0, 0x26, 0xc2,
//		0x68, 0xe5, 0x94, 0xfb,
//		0x94, 0x40, 0x4f, 0x3a,
//	}
//
//	message := []byte{
//		0xf1, 0x6c, 0x96, 0xe8,
//		0x8f, 0xb9, 0x9a, 0x82,
//		0x87, 0xa4, 0x31, 0x21,
//		0x96, 0x2e, 0x89, 0xed,
//		0x52, 0x16, 0x99, 0xfa,
//		0x3e, 0x12, 0x6c, 0x67,
//		0xea, 0xaa, 0x16, 0x80,
//		0x66, 0x35, 0x44, 0x77,
//	}
//}